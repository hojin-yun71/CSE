import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Converts a RSS 2.0 feed from the inputed URL and generates a HTML file with a
 * table of links to all the news items in the original feed as an output.
 *
 * @author Hojin Yun
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {

        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");
        out.println("<title>");

        int index = getChildElement(channel, "title");

        if (channel.child(index).numberOfChildren() == 0) {

            out.println("Empty Title");

        } else {

            out.println(channel.child(index).child(0).label());
        }

        out.println("</title>");
        out.println("</head>");

        out.println("<body>");

        index = getChildElement(channel, "link");

        out.println("<h1><a href=\"" + channel.child(index).child(0).label()
                + "\">" + channel.child(index).child(0).label() + "</a></h1>");

        out.println("<p>");

        index = getChildElement(channel, "description");

        if (channel.child(index).numberOfChildren() == 0) {

            out.println("No description");

        } else {

            out.println(channel.child(index).child(0).label());
        }

        out.println("</p>");

        out.println("<table border = \"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {

        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {

        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;

        for (int j = 0; j < xml.numberOfChildren(); j++) {

            if (xml.child(j).isTag()) {

                if (xml.child(j).label().equals(tag)) {

                    index = j;
                }
            }
        }

        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {

        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        int pubDate = getChildElement(item, "pubDate");
        int source = getChildElement(item, "source");
        int title = getChildElement(item, "title");
        int link = getChildElement(item, "link");
        int description = getChildElement(item, "description");

        //pubDate output
        if (pubDate != -1) {

            out.println(
                    "<td>" + item.child(pubDate).child(0).label() + "</td>");

        } else {

            out.println("<td>No date available</td>");
        }

        //source output
        if (source != -1) {

            out.println("<td>");
            out.print("<a href=\"" + item.child(source).attributeValue("url")
                    + "\">" + item.child(source).child(0).label() + "</a>");
            out.println("</td>");

        } else {

            out.println("<td>No source available</td>");
        }

        //link output
        out.println("<td>");

        if (link != -1) {

            out.print("<a href=\"" + item.child(link).child(0).label() + "\">");
        }

        //title and description output
        if (title != -1) {

            if (item.child(title).child(0).label().equals("")) {

                out.print("No title available");

            } else {

                out.print(item.child(title).child(0).label());
            }

        } else if (description != -1) {

            if (item.child(description).child(0).label().equals("")) {

                out.print("No description available");

            } else {

                out.print(item.child(description).child(0).label());
            }
        }

        //closing tag for link output
        if (link != -1) {

            out.println("</a>");
        }

        out.println("</td>");
        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {

        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the URL of a RSS 2.0 feed : ");
        String url = in.nextLine();

        XMLTree xml = new XMLTree1(url);

        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {

            out.print("Enter the desired name of your .html output file: ");
            String htmlFileName = in.nextLine();

            SimpleWriter fileOut = new SimpleWriter1L(htmlFileName);

            XMLTree channel = xml.child(0);

            outputHeader(channel, fileOut);

            for (int i = 0; i < channel.numberOfChildren(); i++) {

                if (channel.child(i).isTag()) {

                    if (channel.child(i).label().equals("item")) {

                        XMLTree item = channel.child(i);
                        processItem(item, fileOut);
                    }
                }
            }

            outputFooter(fileOut);
            fileOut.close();

        } else {

            out.println("Inputted URL is not a valid RSS 2.0 feed.");
        }

        in.close();
        out.close();
    }

}