import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Converts an XML file that contains a list of RSS 2.0 feeds into a HTML index
 * page with links to each individual feed page. Generates a HTML page for each
 * RSS 2.0 feed page with a table of links to all the news items in the original
 * feed.
 *
 * @author Hojin Yun
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {

        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");

        out.println("<head>");
        out.println("<title>");

        // Find index of title element.
        int titleIndex = getChildElement(channel, "title");

        /*
         * Check if title element is empty. If not empty, print element content.
         */
        if (channel.child(titleIndex).numberOfChildren() == 0) {

            out.println("Empty Title");

        } else {

            // Print title element content.
            out.println(channel.child(titleIndex).child(0).label());
        }

        out.println("</title>");
        out.println("</head>");

        out.println("<body>");

        // Find index of link element.
        int linkIndex = getChildElement(channel, "link");

        /*
         * Print link element content.
         */
        out.print("<h1>");
        out.print("<a href=\"" + channel.child(linkIndex).child(0).label()
                + "\">");
        out.print(channel.child(titleIndex).child(0).label());
        out.print("</a>");
        out.println("</h1>");

        out.println("<p>");

        // Find index of description element.
        int descIndex = getChildElement(channel, "description");

        /*
         * Check if description element is empty. If not empty, print element
         * content.
         */
        if (channel.child(descIndex).numberOfChildren() == 0) {

            out.println("No description");

        } else {

            // Print description element content.
            out.println(channel.child(descIndex).child(0).label());
        }

        out.println("</p>");

        out.println("<table border = \"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {

        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {

        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // Set index to -1.
        int index = -1;

        /*
         * Iterate through all children of xml until one has a tag with the
         * appropriate name. If one child does, set index to the corresponding
         * value of i.
         */
        for (int i = 0; i < xml.numberOfChildren(); i++) {

            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {

                index = i;
            }
        }

        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {

        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * Call getChildElement method to find indexes of each children of item.
         */
        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");
        int linkIndex = getChildElement(item, "link");
        int dateIndex = getChildElement(item, "pubDate");
        int sourceIndex = getChildElement(item, "source");

        out.println("<tr>");

        /*
         * Check if item has a date element and output if there is one.
         */
        if (dateIndex != -1) {

            out.print("<td>");
            out.print(item.child(dateIndex).child(0).label());
            out.println("</td>");

        } else {

            out.print("<td>");
            out.print("No date available");
            out.println("</td>");
        }

        /*
         * Check if item has a source element and output if there is one.
         */
        if (sourceIndex != -1) {

            out.println("<td>");
            out.print("<a href=\"");
            out.print(item.child(sourceIndex).attributeValue("url"));
            out.print("\">");
            out.print(item.child(sourceIndex).child(0).label());
            out.print("</a>");
            out.println("</td>");

        } else {

            out.print("<td>");
            out.print("No source available");
            out.println("</td>");
        }

        /*
         * Check if item has a link element and output if there is one.
         */
        out.println("<td>");

        if (linkIndex != -1) {

            out.print("<a href=\"");
            out.print(item.child(linkIndex).child(0).label());
            out.print("\">");
        }

        /*
         * Check if item has a title element and output if there is one. If not,
         * output description element.
         */
        if (titleIndex != -1) {

            if (item.child(titleIndex).numberOfChildren() == 0) {

                out.print("No title available");

            } else {

                out.print(item.child(titleIndex).child(0).label());
            }

        } else if (descriptionIndex != -1) {

            if (item.child(descriptionIndex).numberOfChildren() == 0) {

                out.print("No description available");

            } else {

                out.print(item.child(descriptionIndex).child(0).label());
            }
        }

        /*
         * Closing tag for link element output.
         */
        if (linkIndex != -1) {

            out.println("</a>");
        }

        out.println("</td>");
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from URL, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        // Create XMLTree object for feed URL.
        XMLTree feedXML = new XMLTree1(url);

        /*
         * Check if this is a valid RSS 2.0 feed with the <rss> tag and a
         * version attribute that has a value of 2.0. If it is, generate
         * corresponding HTML page. If not, print invalid statement.
         */
        if (feedXML.label().equals("rss") && feedXML.hasAttribute("version")
                && feedXML.attributeValue("version").equals("2.0")) {

            // Create child XMLTree object for efficiency.
            XMLTree channel = feedXML.child(0);

            // Call outputHeader method to output opening tags on the HTML file.
            outputHeader(channel, out);

            /*
             * For each child of channel, if it is an item element, call the
             * processItem method to output a table row.
             */
            for (int i = 0; i < channel.numberOfChildren(); i++) {

                if (channel.child(i).isTag()) {

                    if (channel.child(i).label().equals("item")) {

                        XMLTree item = channel.child(i);

                        processItem(item, out);
                    }
                }
            }

            // Call outputFooter method to output closing tags on the HTML file.
            outputFooter(out);

        } else {

            out.println("This is not an RSS 2.0 file.");
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {

        /*
         * Open input and output streams to console.
         */
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * Input XML file and create XMLTree object.
         */
        out.print("Enter the name of your XML file: ");
        String xmlFile = in.nextLine();

        XMLTree xml = new XMLTree1(xmlFile);

        /*
         * Check if this is a valid XML file with the <feeds> tag and a title
         * attribute. If it is, generate index page. If not, print invalid
         * statement.
         */
        if (xml.label().equals("feeds") && xml.hasAttribute("title")) {

            /*
             * Input file name for index page.
             */
            out.print(
                    "Enter the name of your .html file for your index page: ");
            String indexPageFileName = in.nextLine();

            // Open output stream to file for index page.
            SimpleWriter fileOut = new SimpleWriter1L(indexPageFileName);

            String indexPageTitle = xml.attributeValue("title");
            fileOut.println("<html>");
            fileOut.println("<head>");
            fileOut.println("<title>" + indexPageTitle + "</title>");
            fileOut.println("</head>");
            fileOut.println("<body>");
            fileOut.println("<h2>" + indexPageTitle + "</h2>");
            fileOut.println("<ul>");

            /*
             * For each child of XMLTree, check if this is a valid feed with the
             * <feed> tag and URL, name, file attributes.
             */
            for (int i = 0; i < xml.numberOfChildren(); i++) {

                if (xml.child(i).label().equals("feed")
                        && xml.child(i).hasAttribute("url")
                        && xml.child(i).hasAttribute("name")
                        && xml.child(i).hasAttribute("file")) {

                    /*
                     * Assign each attribute value to a String variable.
                     */
                    String feedURL = xml.child(i).attributeValue("url");
                    String feedLinkName = xml.child(i).attributeValue("name");
                    String feedFileName = xml.child(i).attributeValue("file");

                    // Open output stream to file for RSS feed.
                    SimpleWriter feedFile = new SimpleWriter1L(feedFileName);

                    /*
                     * Call processFeed method to ensure feed is RSS 2.0 then
                     * convert to corresponding HTML file.
                     */
                    processFeed(feedURL, feedFileName, feedFile);

                    fileOut.println("<li><a href=\"" + feedFileName + "\">"
                            + feedLinkName + "</a></li>");

                    // Close output stream to file for RSS feed.
                    feedFile.close();
                }
            }

            fileOut.println("</ul>");
            fileOut.println("</body>");
            fileOut.println("</html>");

            // Close output stream to file for index page.
            fileOut.close();

        } else {

            out.println("Contains no feeds with a title attribute.");
        }

        /*
         * Close input and output streams to console.
         */
        in.close();
        out.close();
    }
}